.tiptap {
  // 预留5px给scrollbar
  padding: 12px 55px 12px 60px;
  outline: none;
  min-height: 120px;
  overflow-wrap: break-word;
  word-break: break-word;

  &:focus {
    outline: none;
  }

  :first-child {
    margin-top: 0;
  }

  h1:first-child,
  h2:first-child,
  h3:first-child,
  h4:first-child,
  h5:first-child,
  h6:first-child {
    margin-top: 0;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    margin: 1.5rem 0 1rem 0;
    line-height: 1.1;
    text-wrap: pretty;
    font-weight: 600;

    code {
      font-size: inherit;
      font-weight: inherit;
    }
  }

  h1 {
    margin-top: 0;
    font-size: 2rem;
  }

  h2 {
    font-size: 1.5rem;
  }

  h3 {
    font-size: 1.2rem;
  }

  h4,
  h5,
  h6 {
    font-size: 1rem;
  }

  p {
    margin: 1.1rem 0 0.5rem 0;
    white-space: normal;
    overflow-wrap: break-word;
    word-break: break-word;
    width: 100%;
    line-height: 1.6;
    hyphens: auto;

    &:has(+ ul) {
      margin-bottom: 0;
    }
  }

  a {
    color: var(--color-link);
    text-decoration: none;
    cursor: pointer;

    &:hover {
      text-decoration: underline;
    }
  }

  blockquote {
    border-left: 4px solid var(--color-primary);
    margin: 1.5rem 0;
    padding-left: 1rem;
  }

  code {
    background-color: var(--color-inline-code-background);
    border-radius: 0.4rem;
    color: var(--color-inline-code-text);
    font-size: 0.85rem;
    padding: 0.25em 0.3em;
    font-family: var(--code-font-family);
  }

  pre {
    background: var(--color-code-background);
    border-radius: 0.5rem;
    color: var(--color-text);
    font-family: var(--code-font-family);
    margin: 1.5rem 0;
    padding: 0.75rem 1rem;
    border: 1px solid var(--color-border-soft);

    code {
      background: none;
      color: inherit;
      font-size: 0.8rem;
      padding: 0;
      border: none;
    }
  }

  hr {
    border: none;
    border-top: 1px solid var(--color-gray-2);
    margin: 2rem 0;
  }

  em {
    font-style: italic;
  }

  u {
    text-decoration: underline;
  }

  strong,
  strong * {
    font-weight: 600;
  }

  .placeholder {
    position: relative;

    &:before {
      content: attr(data-placeholder);
      position: absolute;
      color: var(--color-text-secondary);
      opacity: 0.6;
      pointer-events: none;
      font-style: italic;
      left: 0;
      right: 0;
    }

    /* Ensure drag handles and plus buttons remain interactive */
    .drag-handle,
    .plus-button {
      pointer-events: auto;
    }
  }

  /* Show placeholder only when focused or when it's the only empty node */
  .placeholder.has-focus:before {
    opacity: 0.8;
  }

  img {
    max-width: 800px;
    width: 100%;
    height: auto;
  }

  table {
    border-collapse: collapse;
    margin: 0;
    /* Allow action endpoints (rendered as decorations) to slightly overflow table edges */
    overflow: visible;
    table-layout: fixed;
    width: 100%;

    td,
    th {
      border: 1px solid var(--color-border-soft);
      box-sizing: border-box;
      display: table-cell;
      min-width: 120px;
      padding: 6px 8px;
      position: relative;
      vertical-align: top;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;

      > * {
        margin-bottom: 0;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }
    }

    th,
    th * {
      background-color: var(--color-gray-3);
      font-weight: bold;
      text-align: left;
    }

    .selectedCell {
      position: relative; // 确保伪元素定位
    }
    .selectedCell::after {
      content: '';
      position: absolute;
      inset: 0;
      pointer-events: none;
      border: 0 solid var(--color-primary);
      border-radius: 0;
    }
    .selectedCell.selection-top::after {
      border-top-width: 2px;
    }
    .selectedCell.selection-bottom::after {
      border-bottom-width: 2px;
    }
    .selectedCell.selection-left::after {
      border-left-width: 2px;
    }
    .selectedCell.selection-right::after {
      border-right-width: 2px;
    }

    .column-resize-handle {
      background-color: var(--color-primary);
      bottom: -2px;
      pointer-events: none;
      position: absolute;
      right: -2px;
      top: 0;
      width: 4px;
    }

    &:has(.selectedCell) {
      caret-color: transparent !important;
      user-select: none !important;

      *::selection {
        background: transparent !important;
      }

      .column-resize-handle {
        display: none;
      }
    }

    // Position row action buttons relative to first column cells
    tbody tr td:first-child,
    tbody tr th:first-child {
      position: relative;
    }

    // Position column action buttons relative to first row cells
    tbody tr:first-child td,
    tbody tr:first-child th {
      position: relative;
    }
  }

  .tableWrapper {
    position: relative;
    margin: 1rem 0;
    display: grid;
    grid-template-columns: 1fr 25px;
    grid-template-rows: 1fr 25px;
    grid-template-areas:
      'table column-btn'
      'row-btn corner';
    gap: 5px;

    .table-container {
      grid-area: table;
      overflow-x: auto;
      overflow-y: visible;

      &::-webkit-scrollbar {
        cursor: default;
      }

      &::-webkit-scrollbar:horizontal {
        cursor: default;
      }

      &::-webkit-scrollbar-thumb {
        cursor: default;
      }

      &::-webkit-scrollbar-track {
        cursor: default;
      }

      table {
        width: max-content;
        min-width: 100%;
      }
    }

    .add-row-button,
    .add-column-button {
      border: 1px solid var(--color-border);
      background: var(--color-bg-base);
      border-radius: 4px;
      font-size: 12px;
      line-height: 1;
      cursor: pointer;
      display: none;
      align-items: center;
      justify-content: center;
      color: var(--color-text);
      z-index: 20;
      transition: all 0.2s ease;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      pointer-events: auto;

      &:hover {
        background: var(--color-primary);
        color: white;
        border-color: var(--color-primary);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
      }

      &:active {
        transform: scale(0.98);
      }

      &::before {
        content: '+';
        font-weight: bold;
      }
    }

    .add-row-button {
      grid-area: row-btn;
    }

    .add-column-button {
      grid-area: column-btn;
    }

    &:hover,
    &:has(.add-row-button:hover),
    &:has(.add-column-button:hover) {
      .add-row-button,
      .add-column-button {
        display: flex;
      }
    }

    /* Do not show in readonly even on hover */
    &.is-readonly,
    &.is-readonly:hover {
      .add-row-button,
      .add-column-button {
        display: none !important;
      }
    }

    .add-row-button:hover,
    .add-column-button:hover {
      display: flex !important;
    }

    /* Row/Column action triggers (visible on cell selection) */
    .row-action-trigger,
    .column-action-trigger {
      position: absolute;
      height: 20px;
      border-radius: 8px;
      background: var(--color-primary);
      color: #fff;
      border: 1px solid var(--color-primary);
      display: none;
      align-items: center;
      justify-content: center;
      font-size: 12px;
      line-height: 1;
      z-index: 30;
      pointer-events: auto;
    }

    .row-action-trigger::before,
    .column-action-trigger::before {
      content: '•••';
    }
  }

  &.resize-cursor {
    cursor: ew-resize;
    cursor: col-resize;
  }

  ul,
  ol {
    padding: 0 1rem;
    margin: 1.25rem 1rem 1.25rem 0.4rem;

    li p {
      margin-top: 0.25em;
      margin-bottom: 0.25em;
    }

    // Reduce spacing for nested lists
    ul,
    ol {
      margin: 0.5rem 0.5rem 0.5rem 0.2rem;
    }
  }

  ul {
    list-style: disc;
  }

  ol {
    list-style: decimal;
  }

  ul[data-type='taskList'] {
    list-style: none;
    margin-left: 0;
    padding: 0;

    li {
      align-items: center;
      display: flex;

      > label {
        flex: 0 0 auto;
        margin-right: 0.5rem;
        user-select: none;
        display: flex;
        align-items: center;
      }

      > div {
        flex: 1 1 auto;

        p {
          margin: 0;
        }
      }
    }

    /* Checked task item appearance */
    li[data-checked='true'] {
      > div {
        color: var(--color-text-2);
        text-decoration: line-through;
      }
    }

    input[type='checkbox'] {
      cursor: pointer;
    }

    /* Use primary color for checked checkbox */
    input[type='checkbox']:checked {
      accent-color: var(--color-primary);
      background-color: var(--color-primary);
      border-color: var(--color-primary);
    }

    ul[data-type='taskList'] {
      margin: 0;
    }
  }

  /* Math block */
  .block-math-inner {
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 1.2rem;
  }

  /* Bottom spacer to create viewport padding */
  &::after {
    content: '';
    display: block;
    height: 50px;
    pointer-events: none;
  }
}

// Code block wrapper and header styles
.code-block-wrapper {
  position: relative;

  .code-block-header {
    display: flex;
    align-items: center;
    gap: 6px;
    position: absolute;
    top: 4px;
    right: 6px;
    opacity: 0;
    transition: opacity 0.2s;
  }

  &:hover .code-block-header {
    opacity: 1;
  }
}
